// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: keys.sql

package gen

import (
	"context"

	"github.com/lib/pq"
)

const createKey = `-- name: CreateKey :one
INSERT INTO keys (project_id, name, platforms, tags)
VALUES ($1, $2, $3, $4)
ON CONFLICT (project_id, name) DO NOTHING
RETURNING id, project_id, name, platforms, tags
`

type CreateKeyParams struct {
	ProjectID int64      `db:"project_id"`
	Name      string     `db:"name"`
	Platforms []Platform `db:"platforms"`
	Tags      []int64    `db:"tags"`
}

func (q *Queries) CreateKey(ctx context.Context, arg CreateKeyParams) (Key, error) {
	row := q.db.QueryRowContext(ctx, createKey,
		arg.ProjectID,
		arg.Name,
		pq.Array(arg.Platforms),
		pq.Array(arg.Tags),
	)
	var i Key
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Name,
		pq.Array(&i.Platforms),
		pq.Array(&i.Tags),
	)
	return i, err
}
